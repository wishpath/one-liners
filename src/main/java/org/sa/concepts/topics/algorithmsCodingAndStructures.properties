indegree=number of incoming edges directed towards a node.
outdegree=number of outgoing edges directed from a node.
edge\ (graphs)=connection of two nodes.
undirected\ graph=nodes connected bi-directionally.
directed\ graph=nodes connected one-directionally.
permutation=specific ordering of distinct elements.
greedy\ solution=picks best now, ignores future. Assumes local = global best.
memoization=storing results of expensive function calls and return the cached result when the same inputs occur again.
hashing=transforming data into fixed-size code; deterministic; collisions possible.
collision=when different data produce the same hash code.
hash\ use\ cases=data integrity, password storage, encryption, verification, indexing, quick lookups.
hash=unique representation of input data. Deterministic, fixed size, irreversible.
DRY=Don't Repeat Yourself - programming principle.
encapsulation=Hiding internal elements of object or service. Provides clear separation. Improves maintainability.
boilerplate=sections of code that have to be included in many places with little or no alteration.
state\ (of\ object)=current values of fields.
abstraction\ (1)=process of hiding complex implementation details and showing only the necessary features.
abstraction\ (2)=helps to manage complexity by hiding implementation details and exposing only essential features.
abstraction\ examples=interfaces, modules, packages, APIs, frameworks, ORMs, microservices, VMs, containers.
cohesion=degree to which elements of a module or class are related and work together to achieve a single purpose.
cohesion\ example=UserManager class with createUser, deleteUser methods; high cohesion, focused only on user management.
coupling=degree of interdependence between software modules.
factory\ pattern=method for creating objects that implement a common interface.
collision\ resistant=different inputs should not produce the same outcome.
deterministic=same input will always produce the same outcome.
defensive\ programming=ensuring software behaves as expected even when encountering unexpected inputs or conditions.
means\ of\ defensive\ programming=input validation, error handling, robustness, fail-safe defaults, clear documentation.
lazy\ initialization=object creation delayed until first use, improving performance and reducing resource consumption.
proxy\ pattern=proxy object controls access to real object, both share interface, with the proxy being used externally.
Hungarian\ pollution=overusing type prefixes in variable names.
technical\ debt=accumulated code imperfections.
irreversible\ data\ transformation=not possible to obtain the original input from the outcome.
DSL=Domain-Specific Language - syntax tailored to a non-general domain. Example: Thymeleaf provides DSL for HTML.
dispose\ of\ a\ list=release the list and its resources.
dispose\ of\ memory=free up or release memory
justified\ vs\ excusable=justified focuses on positives despite downsides; excusable tolerates known flaws.
heap=ordered data structure, in Java implemented as PriorityQueue. Good for efficient sorting.
deque=double-ended queue, allows insertion and removal from both ends. In Java implemented as ArrayDeque.
parity=state of being even or odd.
trie=tree storing words by letters, good for fast prefix search. Pronounced like “try” (/traɪ/).