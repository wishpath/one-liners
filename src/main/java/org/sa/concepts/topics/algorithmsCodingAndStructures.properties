indegree=number of incoming edges directed towards a node.
outdegree=number of outgoing edges directed from a node.
edge\ (graphs)=connection of two nodes.
undirected\ graph=nodes connected bi-directionally.
directed\ graph=nodes connected one-directionally.
permutation=specific ordering of distinct elements.
greedy\ solution=picks best now, ignores future. Assumes local \= global best.
memoization\ technique=storing the results of expensive function calls and return the cached result when the same inputs occur again.
hashing=transforming data into a fixed-size code. Deterministic. One hash code can mean multiple original data (collision case).
hash=unique representation of the input data. Used for encryption, integrity verification, indexing etc. Deterministic, fixed output size, irreversible, collision resistant.
DRY=Don't Repeat Yourself - programming principle.
encapsulation=Hiding internal elements of object or service. Provides clear separation. Improves maintainability.
boilerplate=sections of code that have to be included in many places with little or no alteration.
state\ (of\ object)=current values of fields.
abstraction\ (1)=process of hiding complex implementation details and showing only the necessary features.
abstraction\ (2)=helps to manage complexity by hiding implementation details and exposing only essential features.
abstraction\ (3)=examples: Interfaces, Abstract Classes, Modules and Packages, APIs (Application Programming Interfaces), Design Patterns (e.g., Facade Pattern, Decorator Pattern), Layered Architecture, Frameworks and Libraries, Database ORM (Object-Relational Mapping), Microservices, Virtual Machines and Containers.
cohesion=degree to which elements of a module or class are related and work together to achieve a single purpose.
cohesion\ example=A UserManager class with methods createUser, deleteUser, and updateUser has high cohesion, focusing solely on user management.
coupling=degree of interdependence between software modules.
factory\ design\ pattern=provides an interface for creating instances of a class, allowing subclasses to alter the type of objects that will be created.
collision\ resistant=different inputs should not produce the same outcome.
deterministic=same input will always produce the same outcome.
defensive\ programming=ensuring software behaves as expected even when encountering unexpected inputs or conditions.
means\ of\ defensive\ programming=input validation, error handling, robustness, fail-safe defaults, clear documentation.
lazy\ initialization=object creation delayed until first use, improving performance and reducing resource consumption.
proxy\ pattern=creating a proxy to control access to a real object, both implementing the same interface, with the proxy being used externally.
Hungarian\ pollution=overusing type prefixes in variable names.
technical\ debt=accumulated code imperfections.
irreversible\ data\ transformation=not possible to obtain the original input from the outcome.
DSL=Domain-Specific Language â€“ syntax tailored to a non-general domain. Example: Thymeleaf provides DSL for HTML.
dispose\ of\ a\ list=release the list and its resources.
dispose\ of\ memory=free up or release memory
justified\ vs\ excusable=justified focuses on positives despite downsides; excusable tolerates known flaws.
heap=ordered data structure, in Java implemented as PriorityQueue. Good for efficient sorting.
deque=double-ended queue, allows insertion and removal from both ends. In Java implemented as ArrayDeque;