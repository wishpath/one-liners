encapsulation=Hiding internal elements of object or service. Provides clear separation. Improves maintainability.
proxy pattern=proxy object controls access to real object, both share interface, with the proxy being used externally.
abstraction (1)=process of hiding complex implementation details and showing only the necessary features.
parity=state of being even or odd.
hashing=transforming data into fixed-size code; deterministic; collisions possible.
deterministic=same input will always produce the same outcome.
DRY=Don't Repeat Yourself - programming principle.
technical debt=accumulated code imperfections.
deque=double-ended queue, allows insertion and removal from both ends. In Java implemented as ArrayDeque.
coupling=degree of interdependence between software modules.
dispose of a list=release the list and its resources.
irreversible data transformation=not possible to obtain the original input from the outcome.
dispose of memory=free up or release memory
cohesion example=UserManager class with createUser, deleteUser methods; high cohesion, focused only on user management.
outdegree=number of outgoing edges directed from a node.
directed graph=nodes connected one-directionally.
defensive programming=ensuring software behaves as expected even when encountering unexpected inputs or conditions.
state (of object)=current values of fields.
indegree=number of incoming edges directed towards a node.
undirected graph=nodes connected bi-directionally.
DSL=Domain-Specific Language - syntax tailored to a non-general domain. Example: Thymeleaf provides DSL for HTML.
heap=ordered data structure, in Java implemented as PriorityQueue. Good for efficient sorting.
permutation=specific ordering of distinct elements.
memoization=storing results of expensive function calls and return the cached result when the same inputs occur again.
abstraction (2)=helps to manage complexity by hiding implementation details and exposing only essential features.
justified vs excusable=justified focuses on positives despite downsides; excusable tolerates known flaws.
greedy solution=picks best now, ignores future. Assumes local = global best.
abstraction examples=interfaces, modules, packages, APIs, frameworks, ORMs, microservices, VMs, containers.
collision resistant=different inputs should not produce the same outcome.
trie=tree storing words by letters, good for fast prefix search. Pronounced like âtryâ (/traÉª/).
factory pattern=method for creating objects that implement a common interface.
means of defensive programming=input validation, error handling, robustness, fail-safe defaults, clear documentation.
collision=when different data produce the same hash code.
boilerplate=sections of code that have to be included in many places with little or no alteration.
lazy initialization=object creation delayed until first use, improving performance and reducing resource consumption.
edge (graphs)=connection of two nodes.
hash use cases=data integrity, password storage, encryption, verification, indexing, quick lookups.
Hungarian pollution=overusing type prefixes in variable names.
cohesion=degree to which elements of a module or class are related and work together to achieve a single purpose.
hash=unique representation of input data. Deterministic, fixed size, irreversible.
