interface\ in\ java=only shows what methods the implementing classes has to implement.
diamond\ operator\ \(Java\)=copies the variable type from the left side to avoid repeating it; marked by <>.
Java\ beans=simple objects with only getters and setters for the attributes.
Spring\ beans=POJOs configured in the application context.
Spring\ boot=part of Spring (Java framework) specific for creating web app back end.
Bean\ factory/\ Application\ context=dependency injection container in Spring.
what\ is\ stereotype\ in\ Spring=role of class, marked by annotation. E.g.: @Controller @Service
context\ (Bounded\ Context)=A defined boundary within the domain that isolates a particular model and ensures consistent terminology and rules within that specific area.
JDBC=Java Database Connectivity - Java-based API that provides a standard interface for connecting to relational databases and executing SQL queries.
JPA=Java Persistence API - Java specification for managing relational data in Java applications. It provides a standard way to map Java objects to database tables and vice versa.
JSP=Java Server Pages - allows Java code directly within HTML pages. Provides tags for iteration, conditionals, and formatting.
IoC=Inversion of Control - design principle - object creation and lifecycle is inverted or delegated to a container or framework, as opposed to being handled by the objects themselves.
.war\ file=Web Application Archive - packaging format used for distributing and deploying web applications in the Java ecosystem. Similar to .jar file.
jar\ hell=challenges arising from conflicts or compatibility issues between different versions of Java Archive (JAR) files, often encountered in projects with multiple dependencies.
jar\ hell(2)=conflicts between Java Archive (JAR) versions in projects with multiple dependencies.
servlet\ container=handles multithreading and lifecycle of servlets. Examples: Jetty, Apache Tomcat.
servlet/controller/MVC=Model View Controller - handles user input, process it, and update the model or view.
component\ scanning=method of configuration: annotations added to classes, attributes, and methods. Helps defining bean.
aspect\ oriented\ programming=way to separate functionality. Example: logging specific method can be triggered from separate class.
present()=method in FluentLenium that checks if the element is present in the DOM.
POJO=Plain Old Java Object - Java class that does not extend or implement any specialized classes or interfaces from frameworks or libraries.
abstract class=class that both shows what methods the extending classes have to implement and can implement some shared code.
pointcut=rule defined in the aspect method's annotation. When an external method is executed, the aspect method gets executed as well.
