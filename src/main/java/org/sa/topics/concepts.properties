#Generated
#Thu May 01 01:25:42 EEST 2025
UI\ dialog=secondary window used to display information or prompt user action.
abstract\ class=both shows what methods the extending classes has to implement and can implement some shared code.
abstraction\ (1)=process of hiding complex implementation details and showing only the necessary features.
abstraction\ (2)=helps to manage complexity by hiding implementation details and exposing only essential features.
abstraction\ (3)=examples\: Interfaces, Abstract Classes, Modules and Packages, APIs (Application Programming Interfaces), Design Patterns (e.g., Facade Pattern, Decorator Pattern), Layered Architecture, Frameworks and Libraries, Database ORM (Object-Relational Mapping), Microservices, Virtual Machines and Containers.
bounded=having specific business areas and functions (distinct from other contexts), isolation (no direct impact on other contexts), contextual meaning (terms and concepts are unambiguous only within the context), and autonomy (independent evolution and management).
cohesion=degree to which elements of a module or class are related and work together to achieve a single purpose.
cohesion\ example=A UserManager class with methods createUser, deleteUser, and updateUser has high cohesion, focusing solely on user management.
context\ (Bounded\ Context)=A defined boundary within the domain that isolates a particular model and ensures consistent terminology and rules within that specific area.
coupling=degree of interdependence between software modules.
directed\ graph=nodes connected one-directionally.
domain=The broader problem space or business area that includes various contexts or subdomains, each with its own specific model and logic.
domain\ model=software implementation of a business area.
edge=connection of two nodes.
example\ of\ a\ semantic\ registration\ message\ (JSON)=Raw Data\: Includes fields such as userId, username, email, registrationDate, and status; Metadata\: Includes contextual information like registrationSource, referralCode, and ipAddress, as well as the verification status.
example\ of\ bounded\ contexts=an e-commerce system with User Management (user registration, authentication, profile management), Order Processing (orders, payments, order statuses), and Inventory Management (stock levels, suppliers, product information).
example\ of\ good\ cohesion\ but\ poor\ separation\ of\ concerns=A DocumentManager class with methods for createDocument, formatDocument, and saveDocument demonstrates good cohesion (all methods are related to document management) but poor separation of concerns (handles multiple unrelated aspects of document handling).
example\ of\ good\ separation\ of\ concerns\ for\ a\ DocumentManager\ class=A DocumentManager class that only manages high-level operations like createDocument and manageDocumentLifecycle, while delegating detailed tasks like document creation to a DocumentFactory, formatting to a Formatter, and saving to a StorageService.
greedy\ solution=picks best now, ignores future. Assumes local \= global best.
high\ coupling\ example=class A uses the whole class B, instead of just using some string that is needed from class B field.
indegree=number of edges directed towards a node.
interface=an intermediate between user and internal functionality; serves as both abstraction and boundary.
interface\ in\ java=only shows what methods the implementing classes has to implement.
key\ Components\ of\ Continuous\ Integration=VCS (e.g. Git), automated builds for compiling and error checking, automated tests, continuous feedback for immediate issue resolution, and a build server (e.g., Jenkins) to monitor VCS and trigger builds/tests.
modal\ window=UI element that blocks interaction with the rest of the interface until closed.
non-semantic\ message=you essentially strip away the contextual and descriptive information, leaving behind only the raw data without additional meaning or context.
outdegree=number of edges directed from a node.
permutation=specific ordering of distinct elements.
semantic\ message=raw data + metadata
ubiquitous\ language=shared, common, used by both domain experts and developers to describe and discuss the domain model.
undirected\ graph=nodes connected bi-directionally.
